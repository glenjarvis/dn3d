====
Dn3D
====

Command line utility for making 3D calculations in grid based role playing games

Project and Build Status
------------------------

.. image:: https://travis-ci.org/glenjarvis/dn3d.svg?branch=main
     :target: https://travis-ci.org/glenjarvis/dn3d
     :alt: Travis tests

.. image:: https://pyup.io/repos/github/glenjarvis/dn3d/shield.svg
     :target: https://pyup.io/repos/github/glenjarvis/dn3d/
     :alt: Updates

.. image:: https://pyup.io/repos/github/glenjarvis/dn3d/python-3-shield.svg
     :target: https://pyup.io/repos/github/glenjarvis/dn3d/
     :alt: Python 3

.. image:: https://readthedocs.org/projects/dn3d/badge/?version=latest
     :target: http://dn3d.readthedocs.io/en/latest/?badge=latest
     :alt: Documentation Status

.. There is currently a problem at Appveyor
.. .. image:: https://ci.appveyor.com/api/projects/status/github/glenjarvis /dn3d?branch=main&svg=true
      :target: https://ci.appveyor.com/project/glenjarvis/dn3d/branch/main
      :alt: Windows build status on Appveyor

* GitHub repo: https://github.com/glenjarvis/dn3d/
* Documentation: `Read The Docs <https://dn3d.readthedocs.io/>`_
* Free software: `LICENSE <https://github.com/glenjarvis/dn3d/blob/main/LICENSE>`_


Welcome
-------

Solve the rare 3D problem in the realm of 2D role playing games. The solutions
generated by this command can be used in any grid-based role playing game.


Sample Problem
~~~~~~~~~~~~~~

Here is a sample problem that we are solving.

Imagine that you have a character who is in battle. The character is a ranged
character (e.g., a Fighter, Ranger, Paladin, etc. -- any character that is
trying to shoot a projectile a distance).

Now imagine, that the character has climbed some height (e.g., climbed a tree)
and is shooting into an area. That area, however, is protected by a fence.

There will be some area that is not visible to your character. This basic ASCII text illustrates:

     PC
     |
     | /
 \   |/                           B
   \ |                            |
     |                            |
     |                            |                            NPC
     ------------------------------------------------------------
     <--PC Distance from fence --><-- NPC distance from fence -->


PC: Player Character (e.g., the one who has climbed up a height to shoot something.
B: Some barrier (such as a 5 foot fence)
NPC: Non Player Character (e.g., the bad guy that the PC is trying to hit).


Non-player-character (Bad Guy) is too close to the barrier (fence)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If the non-player-character (NPC) is close to the barrier (e.g., fence) then
the Player Character (PC) will not be able to see (and thus not shoot) the
NPC). This graphic illustrates this extreme:


     PC
     |
     | /
 \   |/                           B
   \ |                            |
     |                            |
     |                            | NPC
     -----------------------------------


Non-player-character (Bad Guy) is very far from the barrier (fence)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


     PC
     |
     | /
 \   |/
   \ |
     |                            B
     |                            |                            NPC
     ------------------------------------------------------------
     <--PC Distance from fence --><-- NPC distance from fence -->


If the non-player-character (NPC) is very far from the barrier (or the barrier
is very short), then the Player Character (PC) will clearly be able to see and
shoot the NPC. To save on ASCII space, I made the barrier shorter.


Methods of Calculation
----------------------

Classic Trig problem (rounded to Grid: (e.g., 5 foot square))
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This is a classic trigonometry problem that we would see in school. The only
difference is that we round the answer to the role playing units of the game.

In role playing games, there is a grid that represents the 2D space of game
play (like a checker or chessboard does for those games). There are basic units
of space in grids that represent "real world" dimensions. For example, imagine
graph paper that has a square and that each square represents 5 foot on each
side.

Not all role playing games use squares (some use hexagons or other shapes). We
simply calculate the real world example and round the results to the units
given (e.g., a 5 foot square).


Simplifying the grahic as a right triangle (we assume the tree grows straight
up) in this example:


     +   PC
     |   |\
     |   |  \
   H |   |    \   R           +
     |   |    | \             |  B
     |   |    |   \           |  height of barrier
     |   |    |     \         |
     +   ------------- NPC    +
         | D  |   M   |

H: Height of Player Character (e.g., tree)
B: Height of barrier (e.g., fence)
D: Distance along ground between PC and barrier (e.g., base of tree to bottom of fence)
M: Minimum distance needed for the PC to see the NPC
R: The actual range of the weapon (it needs to reach further than if player is on the ground).


All numbers are known in a problem except for M. M can be calculated with:

     B x D
M = -------
     H - B


Derivation (Optional)
^^^^^^^^^^^^^^^^^^^^^

For those who want to figure out how the formula above is derived, we could
either use the angle at the NPC or the angle at the PC. Even though the PC is
the angle firing, it's easier for most to understand the derivation by looking
at it from the NPC's perspective. (Most people are more familiar with the
tangent vs the cotangent).

By definition, the tangent of the angle at the NPC is the height of the tree
over the distance from barrier plus the minimum distance to see the player.
That is:


                H
tan(angle) = -------
              D + M

We don't know the angle in question. And, we really don't care for this
calculation. We are really interested in the height away from the barrier.

So, if we were to consider the same angle, however, considering the height AT
THE BARRIER, we know the tangent of that angle is the height of the barrier
(e.g., fence) over the minimum distance that we care about.


               B
tan(angle) = -----
               M

Thus, we have two equations for the tangent of the same angle. At whatever
angle in question, they will be the same. Thus, setting the equations equal, we
see:

  B        H
----- = -------
  M      D + M


All distances are known except for the minimum distance (M). Solving for M, we
see:

1: B(D + M) = H*M
2: B*D + B*M = H*M
3. H*M - B*M = B*D
4. M (H - B) = B*D

     B * D
M = -----
     H - B



Make this better by Contributing
--------------------------------

This is an Open Source project and contributions are always welcome, and they
are greatly appreciated! Every little bit helps, and credit will always be
given.

You can contribute in many ways:

* `Report bugs <https://github.com/glenjarvis/dn3d/issues>`__
* `Write Documentation <https://dn3d.readthedocs.io/>`__
* `Fix bugs <https://github.com/glenjarvis/dn3d/issues>`__

To maximize the chance that your hard work gets merged, we have these guidelines
to guide you along the way to a successfully merged Pull Request:

* :ref:`contribution_link`
* https://github.com/glenjarvis/dn3d/blob/main/CONTRIBUTING.rst






Make this better by Contributing
--------------------------------

This is an Open Source project and contributions are always welcome, and they
are greatly appreciated! Every little bit helps, and credit will always be
given.

You can contribute in many ways:

* `Report bugs <https://github.com/glenjarvis/dn3d/issues>`__
* `Write Documentation <https://dn3d.readthedocs.io/>`__
* `Fix bugs <https://github.com/glenjarvis/dn3d/issues>`__

To maximize the chance that your hard work gets merged, we have these guidelines
to guide you along the way to a successfully merged Pull Request:

* :ref:`contribution_link`
* https://github.com/glenjarvis/dn3d/blob/main/CONTRIBUTING.rst
